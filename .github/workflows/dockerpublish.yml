name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: springbootimage

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
            else
             docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: If Repository Dispatch Checkout Sha
        if: github.event_name == 'repository_dispatch'
        run: git checkout -f "${{  github.event.client_payload.buildSha }}"
        
      - name: Making Custom Scripts As Executable
        run: |
          cd .github/scripts
          echo "::set-env name=PATH::${PATH}:$(pwd)"
          chmod +x *
    
      - name: Setting the build sha variable
        run: |
          set -e
          BUILD_SHA=$(git log  -n 1 --format=format:%H)
          echo "::set-env name=CI_BUILD_SHA::${BUILD_SHA}"      
        
      - name:  Set build branch
        run: |
          set -e
          if [[ ${{ github.event_name }} = 'repository_dispatch' ]] ;
          then
            BUILD_BRANCH="${{  github.event.client_payload.buildBranch }}"
            
          else
            BUILD_BRANCH="${GITHUB_REF#refs/heads/}"
          fi
          echo "::set-env name=CI_BUILD_BRANCH::${BUILD_BRANCH}"
      - name: Assert Commit is in the specified branch
        run: ci-assertCommitInBranch "${CI_BUILD_SHA}" origin/"${CI_BUILD_BRANCH}"
        
      - name: Set Base Version
        run: |
          set -e
          BASE_VERSION=$(ci-readBaseVersion)
          echo "::set-env name=CI_BASE_VERSION::${BASE_VERSION}"
      - name: Verify Last Version Change Is In Master
        run: ci-assertLastVersionChangeIsInBranch "origin/master"

      - name: Get Release Version & Push Image
        run: |
          set -e
          RELEASE_VERSION=$(ci-getReleaseVersion ${CI_BASE_VERSION} ${CI_BUILD_BRANCH} ${CI_BUILD_SHA})
          echo "::set-env name=CI_RELEASE_VERSION::${RELEASE_VERSION}"
          IMAGE_ID=docker.pkg.github.com/zerowasteteam/samplejavaspringboot/$IMAGE_NAME
 

          echo IMAGE_ID=${IMAGE_ID}
          echo VERSION=${RELEASE_VERSION}

          docker tag image $IMAGE_ID:"${CI_RELEASE_VERSION}"
          docker push $IMAGE_ID:"${CI_RELEASE_VERSION}"
